# Generated by Django 5.1.7 on 2025-03-27 12:31

from django.db import migrations, models

def update_jti_column(apps, schema_editor):
    IDToken = apps.get_model("oauth2_provider", "IDToken")

    # Old field information is required
    old_field = models.UUIDField(unique=True)
    old_field.set_attributes_from_name("jti")

    # New field information
    new_field = models.UUIDField(unique=True)
    new_field.set_attributes_from_name("jti")

    # this should do correct thing by first checking the db
    # and be db backend agnostic...
    schema_editor.alter_field(IDToken, old_field, new_field)


def revert_jti_column(apps, schema_editor):
    IDToken = apps.get_model("oauth2_provider", "IDToken")

    # Reverse: probably does nothing...
    new_field = models.UUIDField(unique=True)
    new_field.set_attributes_from_name("jti")

    old_field = models.UUIDField(unique=True)
    old_field.set_attributes_from_name("jti")

    schema_editor.alter_field(IDToken, new_field, old_field)

class Migration(migrations.Migration):
    """
    Update the length of the `jti` column in the `oauth2_provider_idtoken` table
    from CHAR(32) to CHAR(36).

    In Django versions < 5.0, UUIDFields were stored as 32-character hex strings.
    Starting from Django 5.0, UUIDFields are stored as 36-character dashed strings
    (the canonical string representation of UUIDs).

    The `jti` field in django-oauth-toolkit uses a UUIDField and now requires a
    longer column to avoid DataError exceptions when saving tokens.

    See also:
    https://docs.djangoproject.com/en/5.1/releases/5.0/#migrating-uuidfield
    https://www.albertyw.com/note/django-5-mariadb-uuidfield
    """

    dependencies = [
        ("api", "0007_deviceaccesslogentry_method"),
        ("oauth2_provider", "0012_add_token_checksum"),
    ]

    operations = [
        migrations.RunPython(update_jti_column, revert_jti_column)
    ]
